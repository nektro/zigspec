<pre class='metadata'>
Title: Zig Language Specification
Status: LD
URL: https://nektro.github.io/zigspec/
Shortname: zig
Level: 1
Editor: Meghan Denny <hello@nektro.net>
Abstract: Zig is a general-purpose programming language and toolchain for maintaining robust, optimal and reusable software.
Repository: nektro/zigspec
Work Status: exploring
Markup Shorthands: biblio yes, markdown yes
Boilerplate: omit conformance, abstract no, copyright no, index no, issues-index no
</pre>

# Introduction

This standard defines the Zig [ISODATE] Language. It is a Living Document and kept up to date on a best-effort basis with the latest master releases of [https://github.com/ziglang/zig](https://github.com/ziglang/zig) and provided as-is. As Zig is a pre-1.0 language, any information is capable of changing as new proposals are accepted and implemented. The core parts of the language are fairly stable and likely to remain unchanged going forward but all discretion is up to the Zig Core Team.

TODO more history information

[https://about.sourcegraph.com/podcast/andrew-kelley](https://about.sourcegraph.com/podcast/andrew-kelley) has a lot of early days details

[0.1.1 released on 2017-10-17](https://ziglang.org/download/0.1.1/release-notes.html)

[0.2.0 released on 2018-03-15](https://ziglang.org/download/0.2.0/release-notes.html)

[0.3.0 released on 2018-09-28](https://ziglang.org/download/0.3.0/release-notes.html)

[0.4.0 released on 2019-04-08](https://ziglang.org/download/0.4.0/release-notes.html)

[0.5.0 released on 2019-09-30](https://ziglang.org/download/0.5.0/release-notes.html)

[0.6.0 released on 2020-04-13](https://ziglang.org/download/0.6.0/release-notes.html)

[0.7.0 released on 2020-11-08](https://ziglang.org/download/0.7.0/release-notes.html)

[0.8.0 released on 2021-06-04](https://ziglang.org/download/0.8.0/release-notes.html)

[0.9.0 released on 2021-12-20](https://ziglang.org/download/0.9.0/release-notes.html)

# Zen

- Communicate intent precisely.
- Edge cases matter.
- Favor reading code over writing code.
- Only one obvious way to do things.
- Runtime crashes are better than bugs.
- Compile errors are better than runtime crashes.
- Incremental improvements.
- Avoid local maximums.
- Reduce the amount one must remember.
- Focus on code rather than style.
- Resource allocation may fail; resource deallocation must succeed.
- Memory is a resource.
- Together we serve the users.

# Scope

This Standard defines the Zig [ISODATE] general-purpose programming language.

# Conformance

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [[RFC2119]].

A conforming implementation of Zig must provide and support all the types, values, objects, properties, functions, program syntax, and semantics described in this specification.

A conforming implementation of Zig must interpret source text input in conformance with the latest version of the [[Unicode]] Standard and [[ISO10646]].

# Overview

Zig is a general-purpose programming language and toolchain for maintaining robust, optimal and reusable software.

: **Robust**
:: Behavior is correct even for edge cases such as out of memory.
: **Optimal**
:: Write programs the best way they can behave and perform.
: **Reusable**
:: The same code works in many environments which have different constraints.
: **Maintainable**
:: Precisely communicate intent to the compiler and other programmers. The language imposes a low overhead to reading code and is resilient to changing requirements and environments. 

<pre class=include>path: docs/source.md</pre>
<pre class=include>path: docs/grammar.md</pre>
<pre class=include>path: docs/types.md</pre>
<pre class=include>path: docs/expressions.md</pre>
<pre class=include>path: docs/statements.md</pre>
<pre class=include>path: docs/compiler-builtins.md</pre>
<pre class=include>path: docs/pkg-std.md</pre>
